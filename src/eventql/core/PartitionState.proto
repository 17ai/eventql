/**
 * Copyright (c) 2016 zScale Technology GmbH <legal@zscale.io>
 * Authors:
 *   - Paul Asmuth <paul@zscale.io>
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License ("the license") as
 * published by the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * In accordance with Section 7(e) of the license, the licensing of the Program
 * under the license does not imply a trademark license. Therefore any rights,
 * title and interest in our trademarks remain entirely with us.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the license for more details.
 *
 * You can be released from the requirements of the license by purchasing a
 * commercial license. Buying such a license is mandatory as soon as you develop
 * commercial activities involving this program without disclosing the source
 * code of your own applications
 */
package zbase;
import 'eventql/core/ReplicationState.proto';

message LSMTableRef {
  required string filename = 1;
  required uint64 first_sequence = 2;
  required uint64 last_sequence = 3;
}

message PartitionState {

  /**
   * This partition's tsdb namespace
   */
  required string tsdb_namespace = 1;

  /**
   * SHA1 sum (20 bytes) containing this partition's key
   */
  required bytes partition_key = 2;

  /**
   * The table to which this partition belongs
   */
  required string table_key = 3;

  /**
   * The sstable files that contain the partition records/data
   */
  repeated string sstable_files = 4;

  /**
   * LSM table files. Last is most recent
   */
  repeated LSMTableRef lsm_tables = 7;

  /**
   * LSM sequence number
   */
  optional uint64 lsm_sequence = 8;

  optional ReplicationState replication_state = 9;

  /**
   * SHA1 sum (20 bytes) containing this partition's uuid. The uuid is used
   * to prevent A/B/A scenarios when a partition is created, deleted and
   * recreated. The uuid id is uniqe per PartitionState instanc. I.e. each
   * time the same partition is created it will have a different uuid (and
   * the same partition will have different uuids on each host).
   */
  required bytes uuid = 5;

  /**
   * CSTable version
   */
  optional uint64 cstable_version = 6;

};
