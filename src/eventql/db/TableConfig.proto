/**
 * Copyright (c) 2016 zScale Technology GmbH <legal@zscale.io>
 * Authors:
 *   - Paul Asmuth <paul@zscale.io>
 *   - Laura Schlimmer <laura@zscale.io>
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License ("the license") as
 * published by the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * In accordance with Section 7(e) of the license, the licensing of the Program
 * under the license does not imply a trademark license. Therefore any rights,
 * title and interest in our trademarks remain entirely with us.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the license for more details.
 *
 * You can be released from the requirements of the license by purchasing a
 * commercial license. Buying such a license is mandatory as soon as you develop
 * commercial activities involving this program without disclosing the source
 * code of your own applications
 */
package eventql;

enum TablePartitionerType {
  TBL_PARTITION_TIMEWINDOW = 0;
  TBL_PARTITION_FIXED = 1;
};

enum TableStorage {
  TBL_STORAGE_COLSM = 0;
  TBL_STORAGE_STATIC = 2;
};

// next id: 13
message TableConfig {

  /**
   * The schema for this table
   */
  required bytes schema = 1;

  /**
   * The partitioning key for this table
   */
  optional string partition_key = 11 [default = "time"];

  /**
   * The primary key for this table
   */
  repeated string primary_key = 12;

  /**
   * The partitioner for this table
   */
  required TablePartitionerType partitioner = 2;

  /**
   * What kind of data is stored in this table?
   */
  required TableStorage storage = 3;

  /**
   * The maximum sstable size in bytes
   */
  optional uint64 sstable_size = 5 [default = 536870912];

  /**
   * The number of shards for this table
   */
  optional uint64 num_shards = 7;

  /**
   * How often should we commit the partition to disk in microseconds (N.B.
   * that even with a high value, we can't loose data as inserts are replicated
   * before the interval is up)
   */
  optional uint64 commit_interval = 9 [default = 60000000];

  optional TimeWindowPartitionerConfig time_window_partitioner_config = 8;

  /**
   * If true, allow unauthorized inserts into this table (e.g. for the tracking
   * pixel or for events sent from a mobile device
   */
  optional bool allow_public_insert = 10 [default = true];

};

message TimeWindowPartitionerConfig {

  /**
   * The partition size in microseconds
   */
  required uint64 partition_size = 1;

};

message TableDefinition {

  required string customer = 1;

  required string table_name = 2;

  optional uint64 version = 3;

  required TableConfig config = 4;

  optional uint64 next_field_id = 5;

  repeated string tags = 6;

  optional string metadata_txnid = 7;
  optional uint64 metadata_txnseq = 9;

  repeated string metadata_servers = 8;

};

message TableDefinitionList {

  repeated TableDefinition tables = 1;

  optional uint64 version = 2;

};
