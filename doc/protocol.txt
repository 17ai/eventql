
                         EVENTQL BINARY PROTOCOL v1


Table of Contents

  1. Preface
  2. Overview
  3. Life of a Connection
  4. Notation
  5. Frame header
    5.1 opcode
    5.2 flags
    5.3 length
  6. Messages
    6.1 HELLO
    6.2 PING
    6.3 ERROR
    6.4 ACK
    6.5 KILL
    6.6 KILLED
    6.7 QUERY
    6.8 QUERY_RESULT
    6.9 QUERY_CONTINUE
    6.10 QUERY_DISCARD
    6.11 QUERY_PROGRESS
    6.12 RPC
    6.13 RPC_RESULT


1. Preface

The EventQL binary protocol took a lot of ideas from the MySQL and Cassandra
Binary Protocols.


2. Overview

  The EventQL binary protocol is a frame based protocol. Frames are defined as:

      0         8        16        24        32
      +---------+---------+-------------------+
      |      opcode       |      flags        |
      +---------+---------+-------------------+
      |                length                 |
      +---------+---------+---------+---------+
      |                                       |
      .           ...  payload ...            .
      .                                       .
      +----------------------------------------

  Each frame contains a fixed size header (8 bytes) followed by a variable size
  payload. The header is described in Section 5. The content of the payload
  depends on the header opcode value (the payload can in particular be empty for
  some opcode values). The list of allowed opcode is defined Section 5.4 and the
  details of each corresponding message is described Section 6.

  Note to client implementors: clients library should always assume that the
  payload of a given frame may contain more data than what is described in this
  document. It will however always be safe to ignore the remaining of the frame
  payload in such cases. The reason is that this may allow to sometimes extend
  the protocol with optional features without needing to change the protocol
  version.

  The EventQL protocol is generally speaking a simple request/response protocol.
  However, some requests will result in more than one response frame and some
  opcodes may be sent by the client even though another request has not completed
  yet (such as the KILL opcode). Still, the protocol does not allow "multiplexing"
  of multiple queries or independent operations onto a single connection at the
  same time.


3. Life of a Connection

  The lifetime of a connection consists of two phases: Initiation and Operation.
  A connection is always initiated by the client. To initiate a query, the client
  connects to the server and sends the initial HELLO frame. In the most simple
  case the server responds with a HELLO_ACK frame and the connection transitions
  to the operational phase. Depending on the auth method, more frames might
  be exchanged during the initiation process.

  Once the query is in operational state, the client may initiate a new
  request by sending one of these opcodes:

  After the request has completed, the client may reuse the connection to
  issue another request. At which point a request is considered complete depends
  on the specific opcode and is describe in the entry for the corresponding opcode
  in section 6.

  Note that some opcodes allow the client to send a subset of other opcodes while
  the request is still running.


4. Notation

  To describe the layout of the message payloads in the following sections,
  we define the following:

  [lenencint]      A Little Endian Base 128 encoded integer

  [lenencint*]     A list of [lenenint] values

  [lenencstr]      A length encoded string is a string that is prefixed with
                   a [lenenceint] describing the length of the string.

  [lenencstr*]     A list of [lenencstr] values


5. Frame header

5.1. opcode

  A 16-bit little-endian integer that distinguishes the type of message:
    0x005e  HELLO
    0x0001  PING
    0x0002  ERROR
    0x0003  ACK
    0x0004  KILL
    0x0005  KILLED
    0x0006  QUERY
    0x0007  QUERY_RESULT
    0x0008  QUERY_CONTINUE
    0x0008  QUERY_DISCARD
    0x0009  QUERY_PROGRESS

  Messages are described in Section 6.

5.2. flags

  Flags applying to this frame. The flags are currently unused and ignored.

5.3. length

  A 32-bit little-endian integer representing the length of the payload of the
  frame (note: currently a frame is limited to 256MB in length).


6. Messages

6.2 PING

  On an operational connection, the ping message may be sent at _any_ time by
  either the client or the server, even while a request is running.

  The PING message may safely be ignored.

  Payload:
    <no payload>

  Response:
    <no response>


6.7 QUERY

  The QUERY message initiates a new request and is only sent by the client.
  A QUERY message must not be sent while another request is still running.

  Payload:
    lenencint      max_rows
    lenencint      flags
    lenencstr      query

  Fields:
    max_rows       The maximum number of rows that should be returned in the
                   first response frame. A value of zero indicates that as many
                   rows as possible should be returned in the first response
                   frame

    flags          0x01 ENABLE_PROGRESS - Send progress events

    query          The zero-terminated query string


  Response:
    After sending a query message, the client should expect to receive one of
    these response messages:
      - PING
      - ERROR
      - QUERY_PROGRESS
      - QUERY_RESULT

    The request is considered completed once any one of these conditions is
    satisfied:
      - The server has responseded with a ERROR message
      - The server has responded with a QUERY_RESULT message with the COMPLETE
        flag set

    After the request is complete, the server will not send any further messages.


6.8 QUERY_RESULT

  The QUERY_RESULT message contains a description of the result table as well
  as zero or more rows from the result tables. Results are always paged, i.e.
  depending on the result size the result table will be split into many
  QUERY_RESULT frames.

  After receiving a QUERY_RESULT frame, the client must check if the COMPLETED
  flag is set. If the flag is set, the query can be considered complete and the
  client should not expect any further frames from the server.

  If the flag is not set, the client must either discard the remainder of the
  result by sending a QUERY_DISCARD frame or request the next result frame by
  sending the QUERY_CONTINUE frame.

  In a series of QUERY_RESULT frames, only the first frame will contain the
  result table schema information.

  Payload:
    lenencint      flags
    lenencint      num_result_columns
    lenencint      num_result_rows
    lenencstr*     data
    lenencstr*     column_names
    lenencint      num_rows_modified
    lenencint      num_rows_scanned
    lenencint      num_bytes_scanned
    lenencint      query_runtime_ms

  Fields:
    flags          0x01 COMPLETE - This is the last QUERY_RESULT event
                   0x02 METADATA - This QUERY_RESULT event contains metadata
                   0x04 STATS - This QUERY_RESULT event contains stats

    FIXME

  Response:
    If the COMPLETE flag is set, no response should be sent. If the flag is not
    set the client must respond with QUERY_CONTINUE or QUERY_DISCARD.


6.9 QUERY_CONTINUE

  The QUERY_CONTINUE message may be sent by the client in response to a
  QUERY_RESULT message that did not have the COMPLETED flag set.

  Payload:
    <no payload>

  Response:
    After sending a QUERY_CONTINUE message, the client should expect to receive
    one of these response messages:
      - PING
      - ERROR
      - QUERY_RESULT


6.10 QUERY_DISCARD

  The QUERY_DISCARD message may be sent by the client in response to a
  QUERY_RESULT message that did not have the COMPLETED flag set.

  Payload:
    <no payload>

  Response:
    After sending a QUERY_CONTINUE message, the client should expect to receive
    one of these response messages:
      - PING
      - ERROR
      - QUERY_RESULT


6.11 QUERY_PROGRESS

  The QUERY_PROGRESS message is an information message from the server to the
  client. It contains information about the progress of query execution and
  may be received after sending a QUERY frame and before the first QUERY_RESULT
  frame is received.

  The QUERY_PROGRESS message may safely be ignored.

  Payload:
    lenencint      num_rows_modified
    lenencint      num_rows_scanned
    lenencint      num_bytes_scanned
    lenencint      query_progress_permill
    lenencint      query_elapsed_ms
    lenencint      query_eta_ms

  Fields:
    FIXME

  Response:
    <no response>
