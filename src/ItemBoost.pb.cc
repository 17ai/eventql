// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemBoost.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemBoost.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cm {

namespace {

const ::google::protobuf::Descriptor* ItemBoostTermInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemBoostTermInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemBoostRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemBoostRow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ItemBoost_2eproto() {
  protobuf_AddDesc_ItemBoost_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ItemBoost.proto");
  GOOGLE_CHECK(file != NULL);
  ItemBoostTermInfo_descriptor_ = file->message_type(0);
  static const int ItemBoostTermInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostTermInfo, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostTermInfo, score_),
  };
  ItemBoostTermInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemBoostTermInfo_descriptor_,
      ItemBoostTermInfo::default_instance_,
      ItemBoostTermInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostTermInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostTermInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemBoostTermInfo));
  ItemBoostRow_descriptor_ = file->message_type(1);
  static const int ItemBoostRow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostRow, num_impressions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostRow, num_clicks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostRow, top_terms_),
  };
  ItemBoostRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemBoostRow_descriptor_,
      ItemBoostRow::default_instance_,
      ItemBoostRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBoostRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemBoostRow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ItemBoost_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemBoostTermInfo_descriptor_, &ItemBoostTermInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemBoostRow_descriptor_, &ItemBoostRow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ItemBoost_2eproto() {
  delete ItemBoostTermInfo::default_instance_;
  delete ItemBoostTermInfo_reflection_;
  delete ItemBoostRow::default_instance_;
  delete ItemBoostRow_reflection_;
}

void protobuf_AddDesc_ItemBoost_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ItemBoost.proto\022\002cm\"0\n\021ItemBoostTermIn"
    "fo\022\014\n\004term\030\005 \002(\t\022\r\n\005score\030\006 \002(\r\"e\n\014ItemB"
    "oostRow\022\027\n\017num_impressions\030\003 \002(\r\022\022\n\nnum_"
    "clicks\030\004 \002(\r\022(\n\ttop_terms\030\007 \003(\0132\025.cm.Ite"
    "mBoostTermInfo", 174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ItemBoost.proto", &protobuf_RegisterTypes);
  ItemBoostTermInfo::default_instance_ = new ItemBoostTermInfo();
  ItemBoostRow::default_instance_ = new ItemBoostRow();
  ItemBoostTermInfo::default_instance_->InitAsDefaultInstance();
  ItemBoostRow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemBoost_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemBoost_2eproto {
  StaticDescriptorInitializer_ItemBoost_2eproto() {
    protobuf_AddDesc_ItemBoost_2eproto();
  }
} static_descriptor_initializer_ItemBoost_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ItemBoostTermInfo::kTermFieldNumber;
const int ItemBoostTermInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

ItemBoostTermInfo::ItemBoostTermInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cm.ItemBoostTermInfo)
}

void ItemBoostTermInfo::InitAsDefaultInstance() {
}

ItemBoostTermInfo::ItemBoostTermInfo(const ItemBoostTermInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cm.ItemBoostTermInfo)
}

void ItemBoostTermInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBoostTermInfo::~ItemBoostTermInfo() {
  // @@protoc_insertion_point(destructor:cm.ItemBoostTermInfo)
  SharedDtor();
}

void ItemBoostTermInfo::SharedDtor() {
  if (term_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete term_;
  }
  if (this != default_instance_) {
  }
}

void ItemBoostTermInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemBoostTermInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemBoostTermInfo_descriptor_;
}

const ItemBoostTermInfo& ItemBoostTermInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemBoost_2eproto();
  return *default_instance_;
}

ItemBoostTermInfo* ItemBoostTermInfo::default_instance_ = NULL;

ItemBoostTermInfo* ItemBoostTermInfo::New() const {
  return new ItemBoostTermInfo;
}

void ItemBoostTermInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_term()) {
      if (term_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        term_->clear();
      }
    }
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemBoostTermInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cm.ItemBoostTermInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string term = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_term()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->term().data(), this->term().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "term");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // required uint32 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cm.ItemBoostTermInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cm.ItemBoostTermInfo)
  return false;
#undef DO_
}

void ItemBoostTermInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cm.ItemBoostTermInfo)
  // required string term = 5;
  if (has_term()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->term().data(), this->term().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "term");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->term(), output);
  }

  // required uint32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cm.ItemBoostTermInfo)
}

::google::protobuf::uint8* ItemBoostTermInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cm.ItemBoostTermInfo)
  // required string term = 5;
  if (has_term()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->term().data(), this->term().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "term");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->term(), target);
  }

  // required uint32 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cm.ItemBoostTermInfo)
  return target;
}

int ItemBoostTermInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string term = 5;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->term());
    }

    // required uint32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemBoostTermInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemBoostTermInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemBoostTermInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemBoostTermInfo::MergeFrom(const ItemBoostTermInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemBoostTermInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemBoostTermInfo::CopyFrom(const ItemBoostTermInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBoostTermInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemBoostTermInfo::Swap(ItemBoostTermInfo* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemBoostTermInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemBoostTermInfo_descriptor_;
  metadata.reflection = ItemBoostTermInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemBoostRow::kNumImpressionsFieldNumber;
const int ItemBoostRow::kNumClicksFieldNumber;
const int ItemBoostRow::kTopTermsFieldNumber;
#endif  // !_MSC_VER

ItemBoostRow::ItemBoostRow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cm.ItemBoostRow)
}

void ItemBoostRow::InitAsDefaultInstance() {
}

ItemBoostRow::ItemBoostRow(const ItemBoostRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cm.ItemBoostRow)
}

void ItemBoostRow::SharedCtor() {
  _cached_size_ = 0;
  num_impressions_ = 0u;
  num_clicks_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBoostRow::~ItemBoostRow() {
  // @@protoc_insertion_point(destructor:cm.ItemBoostRow)
  SharedDtor();
}

void ItemBoostRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemBoostRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemBoostRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemBoostRow_descriptor_;
}

const ItemBoostRow& ItemBoostRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemBoost_2eproto();
  return *default_instance_;
}

ItemBoostRow* ItemBoostRow::default_instance_ = NULL;

ItemBoostRow* ItemBoostRow::New() const {
  return new ItemBoostRow;
}

void ItemBoostRow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemBoostRow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_impressions_, num_clicks_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  top_terms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemBoostRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cm.ItemBoostRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_impressions = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_impressions_)));
          set_has_num_impressions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_clicks;
        break;
      }

      // required uint32 num_clicks = 4;
      case 4: {
        if (tag == 32) {
         parse_num_clicks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_clicks_)));
          set_has_num_clicks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_top_terms;
        break;
      }

      // repeated .cm.ItemBoostTermInfo top_terms = 7;
      case 7: {
        if (tag == 58) {
         parse_top_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_top_terms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_top_terms;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cm.ItemBoostRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cm.ItemBoostRow)
  return false;
#undef DO_
}

void ItemBoostRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cm.ItemBoostRow)
  // required uint32 num_impressions = 3;
  if (has_num_impressions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_impressions(), output);
  }

  // required uint32 num_clicks = 4;
  if (has_num_clicks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_clicks(), output);
  }

  // repeated .cm.ItemBoostTermInfo top_terms = 7;
  for (int i = 0; i < this->top_terms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->top_terms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cm.ItemBoostRow)
}

::google::protobuf::uint8* ItemBoostRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cm.ItemBoostRow)
  // required uint32 num_impressions = 3;
  if (has_num_impressions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_impressions(), target);
  }

  // required uint32 num_clicks = 4;
  if (has_num_clicks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_clicks(), target);
  }

  // repeated .cm.ItemBoostTermInfo top_terms = 7;
  for (int i = 0; i < this->top_terms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->top_terms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cm.ItemBoostRow)
  return target;
}

int ItemBoostRow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_impressions = 3;
    if (has_num_impressions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_impressions());
    }

    // required uint32 num_clicks = 4;
    if (has_num_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_clicks());
    }

  }
  // repeated .cm.ItemBoostTermInfo top_terms = 7;
  total_size += 1 * this->top_terms_size();
  for (int i = 0; i < this->top_terms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->top_terms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemBoostRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemBoostRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemBoostRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemBoostRow::MergeFrom(const ItemBoostRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  top_terms_.MergeFrom(from.top_terms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_impressions()) {
      set_num_impressions(from.num_impressions());
    }
    if (from.has_num_clicks()) {
      set_num_clicks(from.num_clicks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemBoostRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemBoostRow::CopyFrom(const ItemBoostRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBoostRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->top_terms())) return false;
  return true;
}

void ItemBoostRow::Swap(ItemBoostRow* other) {
  if (other != this) {
    std::swap(num_impressions_, other->num_impressions_);
    std::swap(num_clicks_, other->num_clicks_);
    top_terms_.Swap(&other->top_terms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemBoostRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemBoostRow_descriptor_;
  metadata.reflection = ItemBoostRow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cm

// @@protoc_insertion_point(global_scope)
