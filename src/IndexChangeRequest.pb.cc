// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IndexChangeRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IndexChangeRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cm {

namespace {

const ::google::protobuf::Descriptor* IndexChangeRequstAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexChangeRequstAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexChangeRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IndexChangeRequest_2eproto() {
  protobuf_AddDesc_IndexChangeRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IndexChangeRequest.proto");
  GOOGLE_CHECK(file != NULL);
  IndexChangeRequstAttribute_descriptor_ = file->message_type(0);
  static const int IndexChangeRequstAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequstAttribute, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequstAttribute, value_),
  };
  IndexChangeRequstAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexChangeRequstAttribute_descriptor_,
      IndexChangeRequstAttribute::default_instance_,
      IndexChangeRequstAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequstAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequstAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexChangeRequstAttribute));
  IndexChangeRequest_descriptor_ = file->message_type(1);
  static const int IndexChangeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequest, customer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequest, docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequest, attributes_),
  };
  IndexChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexChangeRequest_descriptor_,
      IndexChangeRequest::default_instance_,
      IndexChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexChangeRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IndexChangeRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexChangeRequstAttribute_descriptor_, &IndexChangeRequstAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexChangeRequest_descriptor_, &IndexChangeRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IndexChangeRequest_2eproto() {
  delete IndexChangeRequstAttribute::default_instance_;
  delete IndexChangeRequstAttribute_reflection_;
  delete IndexChangeRequest::default_instance_;
  delete IndexChangeRequest_reflection_;
}

void protobuf_AddDesc_IndexChangeRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030IndexChangeRequest.proto\022\002cm\"8\n\032IndexC"
    "hangeRequstAttribute\022\013\n\003key\030\004 \002(\t\022\r\n\005val"
    "ue\030\005 \002(\t\"i\n\022IndexChangeRequest\022\020\n\010custom"
    "er\030\001 \002(\t\022\r\n\005docid\030\002 \002(\t\0222\n\nattributes\030\003 "
    "\003(\0132\036.cm.IndexChangeRequstAttribute", 195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IndexChangeRequest.proto", &protobuf_RegisterTypes);
  IndexChangeRequstAttribute::default_instance_ = new IndexChangeRequstAttribute();
  IndexChangeRequest::default_instance_ = new IndexChangeRequest();
  IndexChangeRequstAttribute::default_instance_->InitAsDefaultInstance();
  IndexChangeRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IndexChangeRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IndexChangeRequest_2eproto {
  StaticDescriptorInitializer_IndexChangeRequest_2eproto() {
    protobuf_AddDesc_IndexChangeRequest_2eproto();
  }
} static_descriptor_initializer_IndexChangeRequest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IndexChangeRequstAttribute::kKeyFieldNumber;
const int IndexChangeRequstAttribute::kValueFieldNumber;
#endif  // !_MSC_VER

IndexChangeRequstAttribute::IndexChangeRequstAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cm.IndexChangeRequstAttribute)
}

void IndexChangeRequstAttribute::InitAsDefaultInstance() {
}

IndexChangeRequstAttribute::IndexChangeRequstAttribute(const IndexChangeRequstAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cm.IndexChangeRequstAttribute)
}

void IndexChangeRequstAttribute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexChangeRequstAttribute::~IndexChangeRequstAttribute() {
  // @@protoc_insertion_point(destructor:cm.IndexChangeRequstAttribute)
  SharedDtor();
}

void IndexChangeRequstAttribute::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void IndexChangeRequstAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexChangeRequstAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexChangeRequstAttribute_descriptor_;
}

const IndexChangeRequstAttribute& IndexChangeRequstAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IndexChangeRequest_2eproto();
  return *default_instance_;
}

IndexChangeRequstAttribute* IndexChangeRequstAttribute::default_instance_ = NULL;

IndexChangeRequstAttribute* IndexChangeRequstAttribute::New() const {
  return new IndexChangeRequstAttribute;
}

void IndexChangeRequstAttribute::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexChangeRequstAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cm.IndexChangeRequstAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // required string value = 5;
      case 5: {
        if (tag == 42) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cm.IndexChangeRequstAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cm.IndexChangeRequstAttribute)
  return false;
#undef DO_
}

void IndexChangeRequstAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cm.IndexChangeRequstAttribute)
  // required string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->key(), output);
  }

  // required string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cm.IndexChangeRequstAttribute)
}

::google::protobuf::uint8* IndexChangeRequstAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cm.IndexChangeRequstAttribute)
  // required string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  // required string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cm.IndexChangeRequstAttribute)
  return target;
}

int IndexChangeRequstAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexChangeRequstAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexChangeRequstAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexChangeRequstAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexChangeRequstAttribute::MergeFrom(const IndexChangeRequstAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexChangeRequstAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexChangeRequstAttribute::CopyFrom(const IndexChangeRequstAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexChangeRequstAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IndexChangeRequstAttribute::Swap(IndexChangeRequstAttribute* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexChangeRequstAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexChangeRequstAttribute_descriptor_;
  metadata.reflection = IndexChangeRequstAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexChangeRequest::kCustomerFieldNumber;
const int IndexChangeRequest::kDocidFieldNumber;
const int IndexChangeRequest::kAttributesFieldNumber;
#endif  // !_MSC_VER

IndexChangeRequest::IndexChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cm.IndexChangeRequest)
}

void IndexChangeRequest::InitAsDefaultInstance() {
}

IndexChangeRequest::IndexChangeRequest(const IndexChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cm.IndexChangeRequest)
}

void IndexChangeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexChangeRequest::~IndexChangeRequest() {
  // @@protoc_insertion_point(destructor:cm.IndexChangeRequest)
  SharedDtor();
}

void IndexChangeRequest::SharedDtor() {
  if (customer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customer_;
  }
  if (docid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docid_;
  }
  if (this != default_instance_) {
  }
}

void IndexChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexChangeRequest_descriptor_;
}

const IndexChangeRequest& IndexChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IndexChangeRequest_2eproto();
  return *default_instance_;
}

IndexChangeRequest* IndexChangeRequest::default_instance_ = NULL;

IndexChangeRequest* IndexChangeRequest::New() const {
  return new IndexChangeRequest;
}

void IndexChangeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_customer()) {
      if (customer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customer_->clear();
      }
    }
    if (has_docid()) {
      if (docid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        docid_->clear();
      }
    }
  }
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cm.IndexChangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string customer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customer().data(), this->customer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_docid;
        break;
      }

      // required string docid = 2;
      case 2: {
        if (tag == 18) {
         parse_docid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docid().data(), this->docid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "docid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        break;
      }

      // repeated .cm.IndexChangeRequstAttribute attributes = 3;
      case 3: {
        if (tag == 26) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cm.IndexChangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cm.IndexChangeRequest)
  return false;
#undef DO_
}

void IndexChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cm.IndexChangeRequest)
  // required string customer = 1;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer().data(), this->customer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->customer(), output);
  }

  // required string docid = 2;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docid().data(), this->docid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->docid(), output);
  }

  // repeated .cm.IndexChangeRequstAttribute attributes = 3;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attributes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cm.IndexChangeRequest)
}

::google::protobuf::uint8* IndexChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cm.IndexChangeRequest)
  // required string customer = 1;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customer().data(), this->customer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->customer(), target);
  }

  // required string docid = 2;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docid().data(), this->docid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docid(), target);
  }

  // repeated .cm.IndexChangeRequstAttribute attributes = 3;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attributes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cm.IndexChangeRequest)
  return target;
}

int IndexChangeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string customer = 1;
    if (has_customer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer());
    }

    // required string docid = 2;
    if (has_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docid());
    }

  }
  // repeated .cm.IndexChangeRequstAttribute attributes = 3;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexChangeRequest::MergeFrom(const IndexChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_customer()) {
      set_customer(from.customer());
    }
    if (from.has_docid()) {
      set_docid(from.docid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexChangeRequest::CopyFrom(const IndexChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexChangeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attributes())) return false;
  return true;
}

void IndexChangeRequest::Swap(IndexChangeRequest* other) {
  if (other != this) {
    std::swap(customer_, other->customer_);
    std::swap(docid_, other->docid_);
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexChangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexChangeRequest_descriptor_;
  metadata.reflection = IndexChangeRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cm

// @@protoc_insertion_point(global_scope)
