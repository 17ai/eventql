// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AnalyticsTableScanParams.proto

#ifndef PROTOBUF_AnalyticsTableScanParams_2eproto__INCLUDED
#define PROTOBUF_AnalyticsTableScanParams_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AnalyticsTableScanParams_2eproto();
void protobuf_AssignDesc_AnalyticsTableScanParams_2eproto();
void protobuf_ShutdownFile_AnalyticsTableScanParams_2eproto();

class AnalyticsTableScanMapperParams;
class AnalyticsTableScanReducerParams;

// ===================================================================

class AnalyticsTableScanMapperParams : public ::google::protobuf::Message {
 public:
  AnalyticsTableScanMapperParams();
  virtual ~AnalyticsTableScanMapperParams();

  AnalyticsTableScanMapperParams(const AnalyticsTableScanMapperParams& from);

  inline AnalyticsTableScanMapperParams& operator=(const AnalyticsTableScanMapperParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyticsTableScanMapperParams& default_instance();

  void Swap(AnalyticsTableScanMapperParams* other);

  // implements Message ----------------------------------------------

  AnalyticsTableScanMapperParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalyticsTableScanMapperParams& from);
  void MergeFrom(const AnalyticsTableScanMapperParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string stream_key = 1;
  inline bool has_stream_key() const;
  inline void clear_stream_key();
  static const int kStreamKeyFieldNumber = 1;
  inline const ::std::string& stream_key() const;
  inline void set_stream_key(const ::std::string& value);
  inline void set_stream_key(const char* value);
  inline void set_stream_key(const char* value, size_t size);
  inline ::std::string* mutable_stream_key();
  inline ::std::string* release_stream_key();
  inline void set_allocated_stream_key(::std::string* stream_key);

  // required string partition_key = 2;
  inline bool has_partition_key() const;
  inline void clear_partition_key();
  static const int kPartitionKeyFieldNumber = 2;
  inline const ::std::string& partition_key() const;
  inline void set_partition_key(const ::std::string& value);
  inline void set_partition_key(const char* value);
  inline void set_partition_key(const char* value, size_t size);
  inline ::std::string* mutable_partition_key();
  inline ::std::string* release_partition_key();
  inline void set_allocated_partition_key(::std::string* partition_key);

  // optional string scanlet_params = 3;
  inline bool has_scanlet_params() const;
  inline void clear_scanlet_params();
  static const int kScanletParamsFieldNumber = 3;
  inline const ::std::string& scanlet_params() const;
  inline void set_scanlet_params(const ::std::string& value);
  inline void set_scanlet_params(const char* value);
  inline void set_scanlet_params(const char* value, size_t size);
  inline ::std::string* mutable_scanlet_params();
  inline ::std::string* release_scanlet_params();
  inline void set_allocated_scanlet_params(::std::string* scanlet_params);

  // @@protoc_insertion_point(class_scope:cm.AnalyticsTableScanMapperParams)
 private:
  inline void set_has_stream_key();
  inline void clear_has_stream_key();
  inline void set_has_partition_key();
  inline void clear_has_partition_key();
  inline void set_has_scanlet_params();
  inline void clear_has_scanlet_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stream_key_;
  ::std::string* partition_key_;
  ::std::string* scanlet_params_;
  friend void  protobuf_AddDesc_AnalyticsTableScanParams_2eproto();
  friend void protobuf_AssignDesc_AnalyticsTableScanParams_2eproto();
  friend void protobuf_ShutdownFile_AnalyticsTableScanParams_2eproto();

  void InitAsDefaultInstance();
  static AnalyticsTableScanMapperParams* default_instance_;
};
// -------------------------------------------------------------------

class AnalyticsTableScanReducerParams : public ::google::protobuf::Message {
 public:
  AnalyticsTableScanReducerParams();
  virtual ~AnalyticsTableScanReducerParams();

  AnalyticsTableScanReducerParams(const AnalyticsTableScanReducerParams& from);

  inline AnalyticsTableScanReducerParams& operator=(const AnalyticsTableScanReducerParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyticsTableScanReducerParams& default_instance();

  void Swap(AnalyticsTableScanReducerParams* other);

  // implements Message ----------------------------------------------

  AnalyticsTableScanReducerParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalyticsTableScanReducerParams& from);
  void MergeFrom(const AnalyticsTableScanReducerParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string customer = 1;
  inline bool has_customer() const;
  inline void clear_customer();
  static const int kCustomerFieldNumber = 1;
  inline const ::std::string& customer() const;
  inline void set_customer(const ::std::string& value);
  inline void set_customer(const char* value);
  inline void set_customer(const char* value, size_t size);
  inline ::std::string* mutable_customer();
  inline ::std::string* release_customer();
  inline void set_allocated_customer(::std::string* customer);

  // required uint64 from_unixmicros = 2;
  inline bool has_from_unixmicros() const;
  inline void clear_from_unixmicros();
  static const int kFromUnixmicrosFieldNumber = 2;
  inline ::google::protobuf::uint64 from_unixmicros() const;
  inline void set_from_unixmicros(::google::protobuf::uint64 value);

  // required uint64 until_unixmicros = 3;
  inline bool has_until_unixmicros() const;
  inline void clear_until_unixmicros();
  static const int kUntilUnixmicrosFieldNumber = 3;
  inline ::google::protobuf::uint64 until_unixmicros() const;
  inline void set_until_unixmicros(::google::protobuf::uint64 value);

  // optional string scanlet_params = 4;
  inline bool has_scanlet_params() const;
  inline void clear_scanlet_params();
  static const int kScanletParamsFieldNumber = 4;
  inline const ::std::string& scanlet_params() const;
  inline void set_scanlet_params(const ::std::string& value);
  inline void set_scanlet_params(const char* value);
  inline void set_scanlet_params(const char* value, size_t size);
  inline ::std::string* mutable_scanlet_params();
  inline ::std::string* release_scanlet_params();
  inline void set_allocated_scanlet_params(::std::string* scanlet_params);

  // @@protoc_insertion_point(class_scope:cm.AnalyticsTableScanReducerParams)
 private:
  inline void set_has_customer();
  inline void clear_has_customer();
  inline void set_has_from_unixmicros();
  inline void clear_has_from_unixmicros();
  inline void set_has_until_unixmicros();
  inline void clear_has_until_unixmicros();
  inline void set_has_scanlet_params();
  inline void clear_has_scanlet_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* customer_;
  ::google::protobuf::uint64 from_unixmicros_;
  ::google::protobuf::uint64 until_unixmicros_;
  ::std::string* scanlet_params_;
  friend void  protobuf_AddDesc_AnalyticsTableScanParams_2eproto();
  friend void protobuf_AssignDesc_AnalyticsTableScanParams_2eproto();
  friend void protobuf_ShutdownFile_AnalyticsTableScanParams_2eproto();

  void InitAsDefaultInstance();
  static AnalyticsTableScanReducerParams* default_instance_;
};
// ===================================================================


// ===================================================================

// AnalyticsTableScanMapperParams

// required string stream_key = 1;
inline bool AnalyticsTableScanMapperParams::has_stream_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalyticsTableScanMapperParams::set_has_stream_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalyticsTableScanMapperParams::clear_has_stream_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalyticsTableScanMapperParams::clear_stream_key() {
  if (stream_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_key_->clear();
  }
  clear_has_stream_key();
}
inline const ::std::string& AnalyticsTableScanMapperParams::stream_key() const {
  // @@protoc_insertion_point(field_get:cm.AnalyticsTableScanMapperParams.stream_key)
  return *stream_key_;
}
inline void AnalyticsTableScanMapperParams::set_stream_key(const ::std::string& value) {
  set_has_stream_key();
  if (stream_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_key_ = new ::std::string;
  }
  stream_key_->assign(value);
  // @@protoc_insertion_point(field_set:cm.AnalyticsTableScanMapperParams.stream_key)
}
inline void AnalyticsTableScanMapperParams::set_stream_key(const char* value) {
  set_has_stream_key();
  if (stream_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_key_ = new ::std::string;
  }
  stream_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.AnalyticsTableScanMapperParams.stream_key)
}
inline void AnalyticsTableScanMapperParams::set_stream_key(const char* value, size_t size) {
  set_has_stream_key();
  if (stream_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_key_ = new ::std::string;
  }
  stream_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.AnalyticsTableScanMapperParams.stream_key)
}
inline ::std::string* AnalyticsTableScanMapperParams::mutable_stream_key() {
  set_has_stream_key();
  if (stream_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stream_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.AnalyticsTableScanMapperParams.stream_key)
  return stream_key_;
}
inline ::std::string* AnalyticsTableScanMapperParams::release_stream_key() {
  clear_has_stream_key();
  if (stream_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stream_key_;
    stream_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnalyticsTableScanMapperParams::set_allocated_stream_key(::std::string* stream_key) {
  if (stream_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_key_;
  }
  if (stream_key) {
    set_has_stream_key();
    stream_key_ = stream_key;
  } else {
    clear_has_stream_key();
    stream_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.AnalyticsTableScanMapperParams.stream_key)
}

// required string partition_key = 2;
inline bool AnalyticsTableScanMapperParams::has_partition_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalyticsTableScanMapperParams::set_has_partition_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalyticsTableScanMapperParams::clear_has_partition_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnalyticsTableScanMapperParams::clear_partition_key() {
  if (partition_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_->clear();
  }
  clear_has_partition_key();
}
inline const ::std::string& AnalyticsTableScanMapperParams::partition_key() const {
  // @@protoc_insertion_point(field_get:cm.AnalyticsTableScanMapperParams.partition_key)
  return *partition_key_;
}
inline void AnalyticsTableScanMapperParams::set_partition_key(const ::std::string& value) {
  set_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_ = new ::std::string;
  }
  partition_key_->assign(value);
  // @@protoc_insertion_point(field_set:cm.AnalyticsTableScanMapperParams.partition_key)
}
inline void AnalyticsTableScanMapperParams::set_partition_key(const char* value) {
  set_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_ = new ::std::string;
  }
  partition_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.AnalyticsTableScanMapperParams.partition_key)
}
inline void AnalyticsTableScanMapperParams::set_partition_key(const char* value, size_t size) {
  set_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_ = new ::std::string;
  }
  partition_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.AnalyticsTableScanMapperParams.partition_key)
}
inline ::std::string* AnalyticsTableScanMapperParams::mutable_partition_key() {
  set_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.AnalyticsTableScanMapperParams.partition_key)
  return partition_key_;
}
inline ::std::string* AnalyticsTableScanMapperParams::release_partition_key() {
  clear_has_partition_key();
  if (partition_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = partition_key_;
    partition_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnalyticsTableScanMapperParams::set_allocated_partition_key(::std::string* partition_key) {
  if (partition_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partition_key_;
  }
  if (partition_key) {
    set_has_partition_key();
    partition_key_ = partition_key;
  } else {
    clear_has_partition_key();
    partition_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.AnalyticsTableScanMapperParams.partition_key)
}

// optional string scanlet_params = 3;
inline bool AnalyticsTableScanMapperParams::has_scanlet_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnalyticsTableScanMapperParams::set_has_scanlet_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnalyticsTableScanMapperParams::clear_has_scanlet_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnalyticsTableScanMapperParams::clear_scanlet_params() {
  if (scanlet_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_->clear();
  }
  clear_has_scanlet_params();
}
inline const ::std::string& AnalyticsTableScanMapperParams::scanlet_params() const {
  // @@protoc_insertion_point(field_get:cm.AnalyticsTableScanMapperParams.scanlet_params)
  return *scanlet_params_;
}
inline void AnalyticsTableScanMapperParams::set_scanlet_params(const ::std::string& value) {
  set_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_ = new ::std::string;
  }
  scanlet_params_->assign(value);
  // @@protoc_insertion_point(field_set:cm.AnalyticsTableScanMapperParams.scanlet_params)
}
inline void AnalyticsTableScanMapperParams::set_scanlet_params(const char* value) {
  set_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_ = new ::std::string;
  }
  scanlet_params_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.AnalyticsTableScanMapperParams.scanlet_params)
}
inline void AnalyticsTableScanMapperParams::set_scanlet_params(const char* value, size_t size) {
  set_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_ = new ::std::string;
  }
  scanlet_params_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.AnalyticsTableScanMapperParams.scanlet_params)
}
inline ::std::string* AnalyticsTableScanMapperParams::mutable_scanlet_params() {
  set_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.AnalyticsTableScanMapperParams.scanlet_params)
  return scanlet_params_;
}
inline ::std::string* AnalyticsTableScanMapperParams::release_scanlet_params() {
  clear_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scanlet_params_;
    scanlet_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnalyticsTableScanMapperParams::set_allocated_scanlet_params(::std::string* scanlet_params) {
  if (scanlet_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scanlet_params_;
  }
  if (scanlet_params) {
    set_has_scanlet_params();
    scanlet_params_ = scanlet_params;
  } else {
    clear_has_scanlet_params();
    scanlet_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.AnalyticsTableScanMapperParams.scanlet_params)
}

// -------------------------------------------------------------------

// AnalyticsTableScanReducerParams

// required string customer = 1;
inline bool AnalyticsTableScanReducerParams::has_customer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalyticsTableScanReducerParams::set_has_customer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalyticsTableScanReducerParams::clear_has_customer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalyticsTableScanReducerParams::clear_customer() {
  if (customer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_->clear();
  }
  clear_has_customer();
}
inline const ::std::string& AnalyticsTableScanReducerParams::customer() const {
  // @@protoc_insertion_point(field_get:cm.AnalyticsTableScanReducerParams.customer)
  return *customer_;
}
inline void AnalyticsTableScanReducerParams::set_customer(const ::std::string& value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
  // @@protoc_insertion_point(field_set:cm.AnalyticsTableScanReducerParams.customer)
}
inline void AnalyticsTableScanReducerParams::set_customer(const char* value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.AnalyticsTableScanReducerParams.customer)
}
inline void AnalyticsTableScanReducerParams::set_customer(const char* value, size_t size) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_ = new ::std::string;
  }
  customer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.AnalyticsTableScanReducerParams.customer)
}
inline ::std::string* AnalyticsTableScanReducerParams::mutable_customer() {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.AnalyticsTableScanReducerParams.customer)
  return customer_;
}
inline ::std::string* AnalyticsTableScanReducerParams::release_customer() {
  clear_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customer_;
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnalyticsTableScanReducerParams::set_allocated_customer(::std::string* customer) {
  if (customer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customer_;
  }
  if (customer) {
    set_has_customer();
    customer_ = customer;
  } else {
    clear_has_customer();
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.AnalyticsTableScanReducerParams.customer)
}

// required uint64 from_unixmicros = 2;
inline bool AnalyticsTableScanReducerParams::has_from_unixmicros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalyticsTableScanReducerParams::set_has_from_unixmicros() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalyticsTableScanReducerParams::clear_has_from_unixmicros() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnalyticsTableScanReducerParams::clear_from_unixmicros() {
  from_unixmicros_ = GOOGLE_ULONGLONG(0);
  clear_has_from_unixmicros();
}
inline ::google::protobuf::uint64 AnalyticsTableScanReducerParams::from_unixmicros() const {
  // @@protoc_insertion_point(field_get:cm.AnalyticsTableScanReducerParams.from_unixmicros)
  return from_unixmicros_;
}
inline void AnalyticsTableScanReducerParams::set_from_unixmicros(::google::protobuf::uint64 value) {
  set_has_from_unixmicros();
  from_unixmicros_ = value;
  // @@protoc_insertion_point(field_set:cm.AnalyticsTableScanReducerParams.from_unixmicros)
}

// required uint64 until_unixmicros = 3;
inline bool AnalyticsTableScanReducerParams::has_until_unixmicros() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnalyticsTableScanReducerParams::set_has_until_unixmicros() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnalyticsTableScanReducerParams::clear_has_until_unixmicros() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnalyticsTableScanReducerParams::clear_until_unixmicros() {
  until_unixmicros_ = GOOGLE_ULONGLONG(0);
  clear_has_until_unixmicros();
}
inline ::google::protobuf::uint64 AnalyticsTableScanReducerParams::until_unixmicros() const {
  // @@protoc_insertion_point(field_get:cm.AnalyticsTableScanReducerParams.until_unixmicros)
  return until_unixmicros_;
}
inline void AnalyticsTableScanReducerParams::set_until_unixmicros(::google::protobuf::uint64 value) {
  set_has_until_unixmicros();
  until_unixmicros_ = value;
  // @@protoc_insertion_point(field_set:cm.AnalyticsTableScanReducerParams.until_unixmicros)
}

// optional string scanlet_params = 4;
inline bool AnalyticsTableScanReducerParams::has_scanlet_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnalyticsTableScanReducerParams::set_has_scanlet_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnalyticsTableScanReducerParams::clear_has_scanlet_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnalyticsTableScanReducerParams::clear_scanlet_params() {
  if (scanlet_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_->clear();
  }
  clear_has_scanlet_params();
}
inline const ::std::string& AnalyticsTableScanReducerParams::scanlet_params() const {
  // @@protoc_insertion_point(field_get:cm.AnalyticsTableScanReducerParams.scanlet_params)
  return *scanlet_params_;
}
inline void AnalyticsTableScanReducerParams::set_scanlet_params(const ::std::string& value) {
  set_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_ = new ::std::string;
  }
  scanlet_params_->assign(value);
  // @@protoc_insertion_point(field_set:cm.AnalyticsTableScanReducerParams.scanlet_params)
}
inline void AnalyticsTableScanReducerParams::set_scanlet_params(const char* value) {
  set_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_ = new ::std::string;
  }
  scanlet_params_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.AnalyticsTableScanReducerParams.scanlet_params)
}
inline void AnalyticsTableScanReducerParams::set_scanlet_params(const char* value, size_t size) {
  set_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_ = new ::std::string;
  }
  scanlet_params_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.AnalyticsTableScanReducerParams.scanlet_params)
}
inline ::std::string* AnalyticsTableScanReducerParams::mutable_scanlet_params() {
  set_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scanlet_params_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.AnalyticsTableScanReducerParams.scanlet_params)
  return scanlet_params_;
}
inline ::std::string* AnalyticsTableScanReducerParams::release_scanlet_params() {
  clear_has_scanlet_params();
  if (scanlet_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scanlet_params_;
    scanlet_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnalyticsTableScanReducerParams::set_allocated_scanlet_params(::std::string* scanlet_params) {
  if (scanlet_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scanlet_params_;
  }
  if (scanlet_params) {
    set_has_scanlet_params();
    scanlet_params_ = scanlet_params;
  } else {
    clear_has_scanlet_params();
    scanlet_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.AnalyticsTableScanReducerParams.scanlet_params)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AnalyticsTableScanParams_2eproto__INCLUDED
