// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DawandaFeed.proto

#ifndef PROTOBUF_DawandaFeed_2eproto__INCLUDED
#define PROTOBUF_DawandaFeed_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DawandaFeed_2eproto();
void protobuf_AssignDesc_DawandaFeed_2eproto();
void protobuf_ShutdownFile_DawandaFeed_2eproto();

class SessionFeed;
class QueryFeed;

// ===================================================================

class SessionFeed : public ::google::protobuf::Message {
 public:
  SessionFeed();
  virtual ~SessionFeed();

  SessionFeed(const SessionFeed& from);

  inline SessionFeed& operator=(const SessionFeed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionFeed& default_instance();

  void Swap(SessionFeed* other);

  // implements Message ----------------------------------------------

  SessionFeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionFeed& from);
  void MergeFrom(const SessionFeed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // repeated string visited_products = 2;
  inline int visited_products_size() const;
  inline void clear_visited_products();
  static const int kVisitedProductsFieldNumber = 2;
  inline const ::std::string& visited_products(int index) const;
  inline ::std::string* mutable_visited_products(int index);
  inline void set_visited_products(int index, const ::std::string& value);
  inline void set_visited_products(int index, const char* value);
  inline void set_visited_products(int index, const char* value, size_t size);
  inline ::std::string* add_visited_products();
  inline void add_visited_products(const ::std::string& value);
  inline void add_visited_products(const char* value);
  inline void add_visited_products(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& visited_products() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_visited_products();

  // repeated string bought_products = 3;
  inline int bought_products_size() const;
  inline void clear_bought_products();
  static const int kBoughtProductsFieldNumber = 3;
  inline const ::std::string& bought_products(int index) const;
  inline ::std::string* mutable_bought_products(int index);
  inline void set_bought_products(int index, const ::std::string& value);
  inline void set_bought_products(int index, const char* value);
  inline void set_bought_products(int index, const char* value, size_t size);
  inline ::std::string* add_bought_products();
  inline void add_bought_products(const ::std::string& value);
  inline void add_bought_products(const char* value);
  inline void add_bought_products(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bought_products() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bought_products();

  // @@protoc_insertion_point(class_scope:SessionFeed)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* session_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> visited_products_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bought_products_;
  friend void  protobuf_AddDesc_DawandaFeed_2eproto();
  friend void protobuf_AssignDesc_DawandaFeed_2eproto();
  friend void protobuf_ShutdownFile_DawandaFeed_2eproto();

  void InitAsDefaultInstance();
  static SessionFeed* default_instance_;
};
// -------------------------------------------------------------------

class QueryFeed : public ::google::protobuf::Message {
 public:
  QueryFeed();
  virtual ~QueryFeed();

  QueryFeed(const QueryFeed& from);

  inline QueryFeed& operator=(const QueryFeed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFeed& default_instance();

  void Swap(QueryFeed* other);

  // implements Message ----------------------------------------------

  QueryFeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFeed& from);
  void MergeFrom(const QueryFeed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // repeated string product_list = 2;
  inline int product_list_size() const;
  inline void clear_product_list();
  static const int kProductListFieldNumber = 2;
  inline const ::std::string& product_list(int index) const;
  inline ::std::string* mutable_product_list(int index);
  inline void set_product_list(int index, const ::std::string& value);
  inline void set_product_list(int index, const char* value);
  inline void set_product_list(int index, const char* value, size_t size);
  inline ::std::string* add_product_list();
  inline void add_product_list(const ::std::string& value);
  inline void add_product_list(const char* value);
  inline void add_product_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& product_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_product_list();

  // repeated string clicked_products = 3;
  inline int clicked_products_size() const;
  inline void clear_clicked_products();
  static const int kClickedProductsFieldNumber = 3;
  inline const ::std::string& clicked_products(int index) const;
  inline ::std::string* mutable_clicked_products(int index);
  inline void set_clicked_products(int index, const ::std::string& value);
  inline void set_clicked_products(int index, const char* value);
  inline void set_clicked_products(int index, const char* value, size_t size);
  inline ::std::string* add_clicked_products();
  inline void add_clicked_products(const ::std::string& value);
  inline void add_clicked_products(const char* value);
  inline void add_clicked_products(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& clicked_products() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_clicked_products();

  // @@protoc_insertion_point(class_scope:QueryFeed)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* session_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> product_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> clicked_products_;
  friend void  protobuf_AddDesc_DawandaFeed_2eproto();
  friend void protobuf_AssignDesc_DawandaFeed_2eproto();
  friend void protobuf_ShutdownFile_DawandaFeed_2eproto();

  void InitAsDefaultInstance();
  static QueryFeed* default_instance_;
};
// ===================================================================


// ===================================================================

// SessionFeed

// required string session_id = 1;
inline bool SessionFeed::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionFeed::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionFeed::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionFeed::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& SessionFeed::session_id() const {
  // @@protoc_insertion_point(field_get:SessionFeed.session_id)
  return *session_id_;
}
inline void SessionFeed::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set:SessionFeed.session_id)
}
inline void SessionFeed::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:SessionFeed.session_id)
}
inline void SessionFeed::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SessionFeed.session_id)
}
inline ::std::string* SessionFeed::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SessionFeed.session_id)
  return session_id_;
}
inline ::std::string* SessionFeed::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionFeed::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SessionFeed.session_id)
}

// repeated string visited_products = 2;
inline int SessionFeed::visited_products_size() const {
  return visited_products_.size();
}
inline void SessionFeed::clear_visited_products() {
  visited_products_.Clear();
}
inline const ::std::string& SessionFeed::visited_products(int index) const {
  // @@protoc_insertion_point(field_get:SessionFeed.visited_products)
  return visited_products_.Get(index);
}
inline ::std::string* SessionFeed::mutable_visited_products(int index) {
  // @@protoc_insertion_point(field_mutable:SessionFeed.visited_products)
  return visited_products_.Mutable(index);
}
inline void SessionFeed::set_visited_products(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SessionFeed.visited_products)
  visited_products_.Mutable(index)->assign(value);
}
inline void SessionFeed::set_visited_products(int index, const char* value) {
  visited_products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SessionFeed.visited_products)
}
inline void SessionFeed::set_visited_products(int index, const char* value, size_t size) {
  visited_products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SessionFeed.visited_products)
}
inline ::std::string* SessionFeed::add_visited_products() {
  return visited_products_.Add();
}
inline void SessionFeed::add_visited_products(const ::std::string& value) {
  visited_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SessionFeed.visited_products)
}
inline void SessionFeed::add_visited_products(const char* value) {
  visited_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SessionFeed.visited_products)
}
inline void SessionFeed::add_visited_products(const char* value, size_t size) {
  visited_products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SessionFeed.visited_products)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SessionFeed::visited_products() const {
  // @@protoc_insertion_point(field_list:SessionFeed.visited_products)
  return visited_products_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SessionFeed::mutable_visited_products() {
  // @@protoc_insertion_point(field_mutable_list:SessionFeed.visited_products)
  return &visited_products_;
}

// repeated string bought_products = 3;
inline int SessionFeed::bought_products_size() const {
  return bought_products_.size();
}
inline void SessionFeed::clear_bought_products() {
  bought_products_.Clear();
}
inline const ::std::string& SessionFeed::bought_products(int index) const {
  // @@protoc_insertion_point(field_get:SessionFeed.bought_products)
  return bought_products_.Get(index);
}
inline ::std::string* SessionFeed::mutable_bought_products(int index) {
  // @@protoc_insertion_point(field_mutable:SessionFeed.bought_products)
  return bought_products_.Mutable(index);
}
inline void SessionFeed::set_bought_products(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SessionFeed.bought_products)
  bought_products_.Mutable(index)->assign(value);
}
inline void SessionFeed::set_bought_products(int index, const char* value) {
  bought_products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SessionFeed.bought_products)
}
inline void SessionFeed::set_bought_products(int index, const char* value, size_t size) {
  bought_products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SessionFeed.bought_products)
}
inline ::std::string* SessionFeed::add_bought_products() {
  return bought_products_.Add();
}
inline void SessionFeed::add_bought_products(const ::std::string& value) {
  bought_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SessionFeed.bought_products)
}
inline void SessionFeed::add_bought_products(const char* value) {
  bought_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SessionFeed.bought_products)
}
inline void SessionFeed::add_bought_products(const char* value, size_t size) {
  bought_products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SessionFeed.bought_products)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SessionFeed::bought_products() const {
  // @@protoc_insertion_point(field_list:SessionFeed.bought_products)
  return bought_products_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SessionFeed::mutable_bought_products() {
  // @@protoc_insertion_point(field_mutable_list:SessionFeed.bought_products)
  return &bought_products_;
}

// -------------------------------------------------------------------

// QueryFeed

// required string session_id = 1;
inline bool QueryFeed::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFeed::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFeed::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFeed::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& QueryFeed::session_id() const {
  // @@protoc_insertion_point(field_get:QueryFeed.session_id)
  return *session_id_;
}
inline void QueryFeed::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set:QueryFeed.session_id)
}
inline void QueryFeed::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryFeed.session_id)
}
inline void QueryFeed::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryFeed.session_id)
}
inline ::std::string* QueryFeed::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QueryFeed.session_id)
  return session_id_;
}
inline ::std::string* QueryFeed::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryFeed::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QueryFeed.session_id)
}

// repeated string product_list = 2;
inline int QueryFeed::product_list_size() const {
  return product_list_.size();
}
inline void QueryFeed::clear_product_list() {
  product_list_.Clear();
}
inline const ::std::string& QueryFeed::product_list(int index) const {
  // @@protoc_insertion_point(field_get:QueryFeed.product_list)
  return product_list_.Get(index);
}
inline ::std::string* QueryFeed::mutable_product_list(int index) {
  // @@protoc_insertion_point(field_mutable:QueryFeed.product_list)
  return product_list_.Mutable(index);
}
inline void QueryFeed::set_product_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryFeed.product_list)
  product_list_.Mutable(index)->assign(value);
}
inline void QueryFeed::set_product_list(int index, const char* value) {
  product_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryFeed.product_list)
}
inline void QueryFeed::set_product_list(int index, const char* value, size_t size) {
  product_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryFeed.product_list)
}
inline ::std::string* QueryFeed::add_product_list() {
  return product_list_.Add();
}
inline void QueryFeed::add_product_list(const ::std::string& value) {
  product_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryFeed.product_list)
}
inline void QueryFeed::add_product_list(const char* value) {
  product_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryFeed.product_list)
}
inline void QueryFeed::add_product_list(const char* value, size_t size) {
  product_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryFeed.product_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryFeed::product_list() const {
  // @@protoc_insertion_point(field_list:QueryFeed.product_list)
  return product_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryFeed::mutable_product_list() {
  // @@protoc_insertion_point(field_mutable_list:QueryFeed.product_list)
  return &product_list_;
}

// repeated string clicked_products = 3;
inline int QueryFeed::clicked_products_size() const {
  return clicked_products_.size();
}
inline void QueryFeed::clear_clicked_products() {
  clicked_products_.Clear();
}
inline const ::std::string& QueryFeed::clicked_products(int index) const {
  // @@protoc_insertion_point(field_get:QueryFeed.clicked_products)
  return clicked_products_.Get(index);
}
inline ::std::string* QueryFeed::mutable_clicked_products(int index) {
  // @@protoc_insertion_point(field_mutable:QueryFeed.clicked_products)
  return clicked_products_.Mutable(index);
}
inline void QueryFeed::set_clicked_products(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:QueryFeed.clicked_products)
  clicked_products_.Mutable(index)->assign(value);
}
inline void QueryFeed::set_clicked_products(int index, const char* value) {
  clicked_products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QueryFeed.clicked_products)
}
inline void QueryFeed::set_clicked_products(int index, const char* value, size_t size) {
  clicked_products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QueryFeed.clicked_products)
}
inline ::std::string* QueryFeed::add_clicked_products() {
  return clicked_products_.Add();
}
inline void QueryFeed::add_clicked_products(const ::std::string& value) {
  clicked_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QueryFeed.clicked_products)
}
inline void QueryFeed::add_clicked_products(const char* value) {
  clicked_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QueryFeed.clicked_products)
}
inline void QueryFeed::add_clicked_products(const char* value, size_t size) {
  clicked_products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QueryFeed.clicked_products)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryFeed::clicked_products() const {
  // @@protoc_insertion_point(field_list:QueryFeed.clicked_products)
  return clicked_products_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryFeed::mutable_clicked_products() {
  // @@protoc_insertion_point(field_mutable_list:QueryFeed.clicked_products)
  return &clicked_products_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DawandaFeed_2eproto__INCLUDED
