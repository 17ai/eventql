// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IndexChangeRequest.proto

#ifndef PROTOBUF_IndexChangeRequest_2eproto__INCLUDED
#define PROTOBUF_IndexChangeRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IndexChangeRequest_2eproto();
void protobuf_AssignDesc_IndexChangeRequest_2eproto();
void protobuf_ShutdownFile_IndexChangeRequest_2eproto();

class IndexChangeRequstAttribute;
class IndexChangeRequest;

// ===================================================================

class IndexChangeRequstAttribute : public ::google::protobuf::Message {
 public:
  IndexChangeRequstAttribute();
  virtual ~IndexChangeRequstAttribute();

  IndexChangeRequstAttribute(const IndexChangeRequstAttribute& from);

  inline IndexChangeRequstAttribute& operator=(const IndexChangeRequstAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexChangeRequstAttribute& default_instance();

  void Swap(IndexChangeRequstAttribute* other);

  // implements Message ----------------------------------------------

  IndexChangeRequstAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexChangeRequstAttribute& from);
  void MergeFrom(const IndexChangeRequstAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cm.IndexChangeRequstAttribute)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_IndexChangeRequest_2eproto();
  friend void protobuf_AssignDesc_IndexChangeRequest_2eproto();
  friend void protobuf_ShutdownFile_IndexChangeRequest_2eproto();

  void InitAsDefaultInstance();
  static IndexChangeRequstAttribute* default_instance_;
};
// -------------------------------------------------------------------

class IndexChangeRequest : public ::google::protobuf::Message {
 public:
  IndexChangeRequest();
  virtual ~IndexChangeRequest();

  IndexChangeRequest(const IndexChangeRequest& from);

  inline IndexChangeRequest& operator=(const IndexChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexChangeRequest& default_instance();

  void Swap(IndexChangeRequest* other);

  // implements Message ----------------------------------------------

  IndexChangeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexChangeRequest& from);
  void MergeFrom(const IndexChangeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string customer = 1;
  inline bool has_customer() const;
  inline void clear_customer();
  static const int kCustomerFieldNumber = 1;
  inline const ::std::string& customer() const;
  inline void set_customer(const ::std::string& value);
  inline void set_customer(const char* value);
  inline void set_customer(const char* value, size_t size);
  inline ::std::string* mutable_customer();
  inline ::std::string* release_customer();
  inline void set_allocated_customer(::std::string* customer);

  // required string docid = 2;
  inline bool has_docid() const;
  inline void clear_docid();
  static const int kDocidFieldNumber = 2;
  inline const ::std::string& docid() const;
  inline void set_docid(const ::std::string& value);
  inline void set_docid(const char* value);
  inline void set_docid(const char* value, size_t size);
  inline ::std::string* mutable_docid();
  inline ::std::string* release_docid();
  inline void set_allocated_docid(::std::string* docid);

  // repeated .cm.IndexChangeRequstAttribute attributes = 3;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  inline const ::cm::IndexChangeRequstAttribute& attributes(int index) const;
  inline ::cm::IndexChangeRequstAttribute* mutable_attributes(int index);
  inline ::cm::IndexChangeRequstAttribute* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::cm::IndexChangeRequstAttribute >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::cm::IndexChangeRequstAttribute >*
      mutable_attributes();

  // @@protoc_insertion_point(class_scope:cm.IndexChangeRequest)
 private:
  inline void set_has_customer();
  inline void clear_has_customer();
  inline void set_has_docid();
  inline void clear_has_docid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* customer_;
  ::std::string* docid_;
  ::google::protobuf::RepeatedPtrField< ::cm::IndexChangeRequstAttribute > attributes_;
  friend void  protobuf_AddDesc_IndexChangeRequest_2eproto();
  friend void protobuf_AssignDesc_IndexChangeRequest_2eproto();
  friend void protobuf_ShutdownFile_IndexChangeRequest_2eproto();

  void InitAsDefaultInstance();
  static IndexChangeRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// IndexChangeRequstAttribute

// required string key = 4;
inline bool IndexChangeRequstAttribute::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexChangeRequstAttribute::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexChangeRequstAttribute::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexChangeRequstAttribute::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& IndexChangeRequstAttribute::key() const {
  // @@protoc_insertion_point(field_get:cm.IndexChangeRequstAttribute.key)
  return *key_;
}
inline void IndexChangeRequstAttribute::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cm.IndexChangeRequstAttribute.key)
}
inline void IndexChangeRequstAttribute::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.IndexChangeRequstAttribute.key)
}
inline void IndexChangeRequstAttribute::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.IndexChangeRequstAttribute.key)
}
inline ::std::string* IndexChangeRequstAttribute::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.IndexChangeRequstAttribute.key)
  return key_;
}
inline ::std::string* IndexChangeRequstAttribute::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexChangeRequstAttribute::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.IndexChangeRequstAttribute.key)
}

// required string value = 5;
inline bool IndexChangeRequstAttribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexChangeRequstAttribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexChangeRequstAttribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexChangeRequstAttribute::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& IndexChangeRequstAttribute::value() const {
  // @@protoc_insertion_point(field_get:cm.IndexChangeRequstAttribute.value)
  return *value_;
}
inline void IndexChangeRequstAttribute::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:cm.IndexChangeRequstAttribute.value)
}
inline void IndexChangeRequstAttribute::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.IndexChangeRequstAttribute.value)
}
inline void IndexChangeRequstAttribute::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.IndexChangeRequstAttribute.value)
}
inline ::std::string* IndexChangeRequstAttribute::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.IndexChangeRequstAttribute.value)
  return value_;
}
inline ::std::string* IndexChangeRequstAttribute::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexChangeRequstAttribute::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.IndexChangeRequstAttribute.value)
}

// -------------------------------------------------------------------

// IndexChangeRequest

// required string customer = 1;
inline bool IndexChangeRequest::has_customer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexChangeRequest::set_has_customer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexChangeRequest::clear_has_customer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexChangeRequest::clear_customer() {
  if (customer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_->clear();
  }
  clear_has_customer();
}
inline const ::std::string& IndexChangeRequest::customer() const {
  // @@protoc_insertion_point(field_get:cm.IndexChangeRequest.customer)
  return *customer_;
}
inline void IndexChangeRequest::set_customer(const ::std::string& value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
  // @@protoc_insertion_point(field_set:cm.IndexChangeRequest.customer)
}
inline void IndexChangeRequest::set_customer(const char* value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.IndexChangeRequest.customer)
}
inline void IndexChangeRequest::set_customer(const char* value, size_t size) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_ = new ::std::string;
  }
  customer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.IndexChangeRequest.customer)
}
inline ::std::string* IndexChangeRequest::mutable_customer() {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.IndexChangeRequest.customer)
  return customer_;
}
inline ::std::string* IndexChangeRequest::release_customer() {
  clear_has_customer();
  if (customer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customer_;
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexChangeRequest::set_allocated_customer(::std::string* customer) {
  if (customer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customer_;
  }
  if (customer) {
    set_has_customer();
    customer_ = customer;
  } else {
    clear_has_customer();
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.IndexChangeRequest.customer)
}

// required string docid = 2;
inline bool IndexChangeRequest::has_docid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexChangeRequest::set_has_docid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexChangeRequest::clear_has_docid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexChangeRequest::clear_docid() {
  if (docid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docid_->clear();
  }
  clear_has_docid();
}
inline const ::std::string& IndexChangeRequest::docid() const {
  // @@protoc_insertion_point(field_get:cm.IndexChangeRequest.docid)
  return *docid_;
}
inline void IndexChangeRequest::set_docid(const ::std::string& value) {
  set_has_docid();
  if (docid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docid_ = new ::std::string;
  }
  docid_->assign(value);
  // @@protoc_insertion_point(field_set:cm.IndexChangeRequest.docid)
}
inline void IndexChangeRequest::set_docid(const char* value) {
  set_has_docid();
  if (docid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docid_ = new ::std::string;
  }
  docid_->assign(value);
  // @@protoc_insertion_point(field_set_char:cm.IndexChangeRequest.docid)
}
inline void IndexChangeRequest::set_docid(const char* value, size_t size) {
  set_has_docid();
  if (docid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docid_ = new ::std::string;
  }
  docid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cm.IndexChangeRequest.docid)
}
inline ::std::string* IndexChangeRequest::mutable_docid() {
  set_has_docid();
  if (docid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cm.IndexChangeRequest.docid)
  return docid_;
}
inline ::std::string* IndexChangeRequest::release_docid() {
  clear_has_docid();
  if (docid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = docid_;
    docid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IndexChangeRequest::set_allocated_docid(::std::string* docid) {
  if (docid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docid_;
  }
  if (docid) {
    set_has_docid();
    docid_ = docid;
  } else {
    clear_has_docid();
    docid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cm.IndexChangeRequest.docid)
}

// repeated .cm.IndexChangeRequstAttribute attributes = 3;
inline int IndexChangeRequest::attributes_size() const {
  return attributes_.size();
}
inline void IndexChangeRequest::clear_attributes() {
  attributes_.Clear();
}
inline const ::cm::IndexChangeRequstAttribute& IndexChangeRequest::attributes(int index) const {
  // @@protoc_insertion_point(field_get:cm.IndexChangeRequest.attributes)
  return attributes_.Get(index);
}
inline ::cm::IndexChangeRequstAttribute* IndexChangeRequest::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:cm.IndexChangeRequest.attributes)
  return attributes_.Mutable(index);
}
inline ::cm::IndexChangeRequstAttribute* IndexChangeRequest::add_attributes() {
  // @@protoc_insertion_point(field_add:cm.IndexChangeRequest.attributes)
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cm::IndexChangeRequstAttribute >&
IndexChangeRequest::attributes() const {
  // @@protoc_insertion_point(field_list:cm.IndexChangeRequest.attributes)
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::cm::IndexChangeRequstAttribute >*
IndexChangeRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:cm.IndexChangeRequest.attributes)
  return &attributes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IndexChangeRequest_2eproto__INCLUDED
